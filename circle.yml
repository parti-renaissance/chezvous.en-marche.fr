---
version: 2.1
templates:
  defaults: &defaults
    docker:
      - image: circleci/node:14-browsers
        environment:
          JOBS: 2

  node_key: &node_key
    key: node-deps-{{ checksum "yarn.lock" }}-{{ checksum "circle.yml" }}

  restore_node: &restore_node
    restore_cache:
      <<: *node_key

  deploy_static: &deploy_static
    <<: *defaults
    steps:
      - checkout
      - <<: *restore_node
      - deploy:
          name: Deploy to Google Cloud
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode > key.json
            env | sed -n "s/^${ENV}_//p" >> .env
            npx ember deploy "$(echo $ENV | awk '{print tolower($0)}')" --verbose --activate

  deploy_dev: &deploy_dev
    <<: *defaults
    steps:
      - checkout
      - <<: *restore_node
      - add_ssh_keys:
          fingerprints:
            - "c7:b5:c4:c5:4a:4b:5d:4e:42:b6:f9:53:fa:38:36:23"
      - deploy:
          name: Deploy to GitHub Pages
          command: |
            git config --global user.email "deploy@circleci"
            git config --global user.name "deploy bot"
            env | sed -n "s/^DEV_//p" >> .env
            npx ember deploy dev --verbose


  filter_staging: &filter_staging
    filters:
      branches:
        only: master
      tags:
        only: staging

  filter_prod: &filter_prod
    filters:
      branches:
        ignore: /.*/
      tags:
        only: /^v[0-9]+\.[0-9]+\.[0-9]+/

jobs:
  build-static:
    <<: *defaults
    steps:
      - checkout

      - <<: *restore_node
      - run:
          name: Install node dependencies
          command: |
            if [ ! -d node_modules ]; then
              yarn --pure-lockfile
            fi
      - save_cache:
          <<: *node_key
          paths:
            - node_modules

  test-static:
    <<: *defaults
    steps:
      - checkout
      - <<: *restore_node
      - run:
          name: Test
          environment:
            CIRCLE_TEST_RESULTS: test-results
          command: npx ember test
      - store_test_results:
          path: test-results/

  deploy-static-staging:
    environment:
      ENV: STAGING
    <<: *deploy_static

  deploy-static-prod:
    environment:
      ENV: PROD
    <<: *deploy_static

  deploy-static-dev:
    <<: *deploy_dev

workflows:
  just-test:
    jobs:
      - build-static:
          filters:
            branches:
              ignore: master
      - test-static:
          requires:
            - build-static

  deploy-staging:
    jobs:
      - build-static:
          <<: *filter_staging
      - test-static:
          <<: *filter_staging
          requires:
            - build-static
      - deploy-static-staging:
          <<: *filter_staging
          requires:
            - test-static

  deploy-prod:
    jobs:
      - build-static:
          <<: *filter_prod
      - test-static:
          <<: *filter_prod
          requires:
            - build-static
      - deploy-static-prod:
          <<: *filter_prod
          requires:
            - test-static
